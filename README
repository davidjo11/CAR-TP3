########################################################################################################
############################################# TP3 CAR : RMI  ###########################################
########################################################################################################

Auteurs : Thibaud VERBAERE & David JOSIAS

------------------------
------Introduction------
------------------------
Le but de TP était de réalisé une application qui permettait de transférer en RMI des données à un
ensemble de noeud. Il devait être possible de créer des noeuds s'exécutant sur différentes machines
virtuelles.
Dans un premier temps nous avons réalisé cette application selon un schéma d'arbre. Dans ce schéma,
chaque noeud possède un père et des fils. Quand un noeud reçoit un message, il propage alors ce message
vers ses fils et ainsi de suite.
Ce premier travail est inclu dans l'archive et organisé ainsi :

-package site.arbre : contient l'interface d'un site, l'implémentation du site selon le schéma d'arbre et
le une classe Transfert. Cette dernière permet d'envoyer chaque message dans un thread différent.

-package site.arbre.serveur : contient la classe Serveur. C'est cette classe qu'il faut lancer pour créer
un nouveau site (voir utilisation dans la rubrique consacrée).

-package site.arbre.client : contient la classe Client. C'est avec cette classe qu'on peut envoyer le
premier message à un des sites et qui sera propagé partout ailleurs (voir utilisation dans la rubrique
consacrée).

Avec ce schéma, il est par contre impossible d'envoyer un message partout depuis un site feuille (c'est
à dire un site sans fils). En effet, lors de la propagation, on transmet le message qu'aux fils uniquement.
C'est pour cela que nous devions ensuite adapter cette application pour un schéma en graphe, pour pouvoir
faire rayonner le message vers chaque site.
Ce deuxième travail est organisé de la même façon que pour les arbres.

------------------------
------Utilisation-------
------------------------
Pour lancer les serveurs une fois dans le répertoire bin, tapez:

	java -classpath ../lib:. site.graphe.serveur.Serveur [port] [name] [portPere]

	- port (obligatoire)  : le port associé au site;
	- name (obligatoire)  : le nom du site (à mettre entre guillemets au cas où vous mettez des espaces);
	- portPere (optionnel): le port du père.

Pour lancer le client, une fois dans le répertoire bin, tapez:

	java -classpath ../lib:. site.graphe.client.Client [port] [message]

	- port  (obligatoire): le port du site à partir duquel vous voulez envoyer le message
	- message (optionnel): le message à propager (valeur par défaut: "Le fameux message").
	
POUR LES GRAPHES:

Pour lancer les serveurs une fois dans le répertoire bin, tapez:

	java -classpath ../lib:. site.graphe.serveur.Serveur [port] [name] [portVoisins]

	- port (obligatoire)  : le port associé au site;
	- name (obligatoire)  : le nom du site (à mettre entre guillemets au cas où vous mettez des espaces);
	- portPere (optionnel): les ports des voisins séparés par des virgules et sans espaces.

Pour lancer le client, une fois dans le répertoire bin, tapez:

	java -classpath ../lib:. site.graphe.client.Client [port] [message]

	- port  (obligatoire): le port du site à partir duquel vous voulez envoyer le message
	- message (optionnel): le message à propager (valeur par défaut: "Le fameux message").

EXPLIQUER LE SERVERGENERATOR.

------------------------
----Implémentation------
------------------------
Pour les graphes, nous avons réutiliser le code pour les arbres. Mais nous avons surtout du modifier certaines
choses :
	- Nous avons supprimé la notion de père pour un site, qui n'était plus utile et adaptée pour ce cas.
	- Chaque site a desormais une liste de voisins et non une liste de fils.
	- Desormais nous avons une liste de données reçues par le site.
Pourquoi une liste de données ?
C'est un choix d'implémentation ! Nous avons pensé qu'il serait mieux pour la concurrence d'utiliser un tel
système plutôt qu'un booléen est_visité.
Avec la liste, si l'on envoie deux messages en même temps à des sites différents nous pouvons alors diffuser les
deux messages pour chaque site. Avec le booléen chaque site recevrait un seul des messages.
Après chaque envoi, le message envoyé est retiré de la liste de tout site, ainsi le même message peut être ré-
envoyé une nouvelle fois.


------------------------
--Structure arbitraire--
------------------------
Nous avons créé un générateur de script permettant de lancer des différents serveurs, chacun dans un terminal et associé à
un port.
Ainsi pour générer le script de lancement des serveurs, utilisez le fichier ServerGen.jar en renseignant les paramètres suivants:
1 - le nombre de serveurs à créer
2 - le type de la structure (-g pour un graphe, -a pour un arbre)
3 - les numéros des ports en séparant les numéros par des virgules et sans aucun espace.

Partie implémentation:

Brièvement, une fois les arguments récupérés, nous créons un serveur racine sans aucun voisin ou père.
Ensuite, pour créer le serveur n°i, nous prenons un nombre aléatoire x pour compris entre 0 et le nombre de serveurs créés jusqu'à
maintenant, c'est-à-dire i-1 serveurs pour:
	- dans le cas d'un graphe, ajouter x voisins au serveur en les choisissant au hasard;
	- dans le cas d'un arbre, ajouter le serveur en position x dans la liste contenant les i-1 serveurs créés jusqu'à maintenant.

Une fois, la structure terminée nous obtenons un fichier nommé launchServer.sh à la racine du projet.

Tout cela a été fait dans la classe site.utils.ServerGenerator.


------------------------
-------Les Tests--------
------------------------
Nous avons écrit des tests unitaires en JAVA pour vérifier le comportement de notre programme.
Tout semble correct, que ce soit de l'ajout de voisin ou de la diffusion de message.
Nous avons également tester la concurrence :
Vous trouverez deux sh dans le projet :
Pour tester nous avons lancer concurrence_creer.sh qui créé un anneau de quatre sites. Puis lancer l'autre script
nommé concurrence_envoyer qui envoit deux messages en simultané. Le résultat est plutôt bon : chaque site a reçu
les deux messages.

------------------------
-------Problèmes--------
------------------------
Pas de problèmes pour ce TP.
